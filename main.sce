exec("converter.sci");
exec("converter_zeros.sci");
exec("nb_bits.sci") // Calcul du volume d'une image

quantiTable0 = [1,1,1,1,1,2,3,3;1,1,1,1,1,3,3,3;1,1,1,1,2,3,3,3;1,1,1,1,3,4,4,3;1,1,2,3,3,5,5,4;1,2,3,3,4,5,6,5;2,3,4,4,5,6,6,5;4,5,5,5,6,5,5,5]

quantiTable1 = [16,11,10,16,24,40,51,61;12,12,14,19,26,58,60,55;14,13,16,24,40,57,69,56;14,17,22,29,51,87,80,62;18,22,37,56,68,109,103,77;24,35,55,64,81,104,113,92;49,64,78,87,103,121,120,101;72,92,95,98,112,100,103,99]

quantiTable2 = [80,55,50,80,120,200,255,255;60,60,70,95,130,255,255,255;70,65,80,120,200,255,255,255;70,85,110,145,255,255,255,255;90,110,185,255,255,255,255,255;120,175,255,255,255,255,255,255;245,255,255,255,255,255,255,255;255,255,255,255,255,255,255,255]
quantiTable3 = [50,30,30,50,100,150,255,255;40,40,50,70,110,255,255,255;50,45,60,100,150,255,255,255;70,85,110,145,255,255,255,255;90,110,185,255,255,255,255,255;120,175,255,255,255,255,255,255;245,255,255,255,255,255,255,255;255,255,255,255,255,255,255,255]
quantiTableE = [1,2,2,2,2,2,2,2;2,2,2,2,2,2,2,2;2,2,2,2,2,2,2,2;2,2,2,2,2,2,2,2;2,2,2,2,2,2,2,2;2,2,2,2,2,2,2,2;2,2,2,2,2,2,2,2;2,2,2,2,2,2,2,2]*1000
quantiTableAdobe = [32,33,51,81,66,39,34,17;33,36,48,47,28,23,12,12;51,48,47,28,23,12,12,12;81,47,28,23,12,12,12,12;66,28,23,12,12,12,12,12;39,23,12,12,12,12,12,12;34,12,12,12,12,12,12,12;17,12,12,12,12,12,12,12]

in = imread("renard2.tif")(:,:,1);
long = size(in)

outPut = BWConverter(in, quantiTable1)
//outPut = RGBConverter_zeros(in, quantiTable1)

outCppeg = outPut(1)
outBmcpp = outPut(2)

//taille = count_bits(outCppeg);
//disp(string(taille(1))+" bits")
//pourcentage_0 = taille(2)*100/(long(1)*long(2))
//disp(string(pourcentage_0)+"%")

imwrite(outBmcpp./255, "testR.bmp")
//write(outCppeg, "LenaIsCompression3.cppeg")

//imwrite(outBmcpp, "LenaIsBackFromCppeg.bmcpp")
